dbopen	query_builder/rdb/databases/sqlite/sqlite_impl.html#dbopen,string,string,string,string,int32,int,int	sqlite_impl: dbopen(database: string = &quot;&quot;; user: string = &quot;&quot;; password: string = &quot;&quot;;\n       host: string = &quot;&quot;; port: int32 = 0; maxConnections: int = 1; timeout = 30): Connections	
query	query_builder/rdb/databases/sqlite/sqlite_impl.html#query,PSqlite3,string,seq[string],int	sqlite_impl: query(db: PSqlite3; query: string; args: seq[string]; timeout: int): Future[\n    (seq[Row], DbRows)]	
queryPlain	query_builder/rdb/databases/sqlite/sqlite_impl.html#queryPlain,PSqlite3,string,seq[string],int	sqlite_impl: queryPlain(db: PSqlite3; query: string; args: seq[string]; timeout: int): Future[\n    seq[Row]]	
exec	query_builder/rdb/databases/sqlite/sqlite_impl.html#exec,PSqlite3,string,seq[string],int	sqlite_impl: exec(db: PSqlite3; query: string; args: seq[string]; timeout: int): owned(\n    Future[void])	
getColumns	query_builder/rdb/databases/sqlite/sqlite_impl.html#getColumns,PSqlite3,string,seq[string],int	sqlite_impl: getColumns(db: PSqlite3; query: string; args: seq[string]; timeout: int): Future[\n    seq[string]]	
prepare	query_builder/rdb/databases/sqlite/sqlite_impl.html#prepare,PSqlite3,string,int	sqlite_impl: prepare(db: PSqlite3; query: string; timeout: int): Future[PStmt]	
preparedQuery	query_builder/rdb/databases/sqlite/sqlite_impl.html#preparedQuery,PSqlite3,seq[string],PStmt	sqlite_impl: preparedQuery(db: PSqlite3; args: seq[string] = @[]; sqliteStmt: PStmt): Future[\n    (seq[Row], DbRows)]	
preparedExec	query_builder/rdb/databases/sqlite/sqlite_impl.html#preparedExec,PSqlite3,seq[string],PStmt	sqlite_impl: preparedExec(db: PSqlite3; args: seq[string] = @[]; sqliteStmt: PStmt): owned(\n    Future[void])	
