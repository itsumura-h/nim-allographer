dbopen	query_builder/rdb/databases/postgres/postgres_impl.html#dbopen,string,string,string,string,int32,int,int	postgres_impl: dbopen(database: string = &quot;&quot;; user: string = &quot;&quot;; password: string = &quot;&quot;;\n       host: string = &quot;&quot;; port: int32 = 0; maxConnections: int = 1; timeout = 30): Connections	
query	query_builder/rdb/databases/postgres/postgres_impl.html#query,PPGconn,string,seq[string],int	postgres_impl: query(db: PPGconn; query: string; args: seq[string]; timeout: int): Future[\n    (seq[Row], DbRows)]	
queryPlain	query_builder/rdb/databases/postgres/postgres_impl.html#queryPlain,PPGconn,string,seq[string],int	postgres_impl: queryPlain(db: PPGconn; query: string; args: seq[string]; timeout: int): Future[\n    seq[Row]]	
exec	query_builder/rdb/databases/postgres/postgres_impl.html#exec,PPGconn,string,seq[string],int	postgres_impl: exec(db: PPGconn; query: string; args: seq[string]; timeout: int): owned(\n    Future[void])	
getColumns	query_builder/rdb/databases/postgres/postgres_impl.html#getColumns,PPGconn,string,seq[string],int	postgres_impl: getColumns(db: PPGconn; query: string; args: seq[string]; timeout: int): Future[\n    seq[string]]	
prepare	query_builder/rdb/databases/postgres/postgres_impl.html#prepare,PPGconn,string,int,string	postgres_impl: prepare(db: PPGconn; query: string; timeout: int; stmtName: string): Future[int]	
preparedQuery	query_builder/rdb/databases/postgres/postgres_impl.html#preparedQuery,PPGconn,seq[string],int,int,string	postgres_impl: preparedQuery(db: PPGconn; args: seq[string]; nArgs: int; timeout: int;\n              stmtName: string): Future[(seq[Row], DbRows)]	
preparedExec	query_builder/rdb/databases/postgres/postgres_impl.html#preparedExec,PPGconn,seq[string],int,int,string	postgres_impl: preparedExec(db: PPGconn; args: seq[string]; nArgs: int; timeout: int;\n             stmtName: string): owned(Future[void])	
