table	query_builder/models/postgres/postgres_query.html#table,PostgresQuery,string	postgres_query: table(self: PostgresQuery; tableArg: string): PostgresQuery	
`distinct`	query_builder/models/postgres/postgres_query.html#distinct,PostgresQuery	postgres_query: `distinct`(self: PostgresQuery): PostgresQuery	
join	query_builder/models/postgres/postgres_query.html#join,PostgresQuery,string,string,string,string	postgres_query: join(self: PostgresQuery; table: string; column1: string; symbol: string;\n     column2: string): PostgresQuery	
leftJoin	query_builder/models/postgres/postgres_query.html#leftJoin,PostgresQuery,string,string,string,string	postgres_query: leftJoin(self: PostgresQuery; table: string; column1: string; symbol: string;\n         column2: string): PostgresQuery	
where	query_builder/models/postgres/postgres_query.html#where,PostgresQuery,string,string,	postgres_query: where(self: PostgresQuery; column: string; symbol: string;\n      value: string | int | float): PostgresQuery	
where	query_builder/models/postgres/postgres_query.html#where,PostgresQuery,string,string,bool	postgres_query: where(self: PostgresQuery; column: string; symbol: string; value: bool): PostgresQuery	
where	query_builder/models/postgres/postgres_query.html#where,PostgresQuery,string,string,_2	postgres_query: where(self: PostgresQuery; column: string; symbol: string; value: nil.type): PostgresQuery	
orWhere	query_builder/models/postgres/postgres_query.html#orWhere,PostgresQuery,string,string,	postgres_query: orWhere(self: PostgresQuery; column: string; symbol: string;\n        value: string | int | float | bool): PostgresQuery	
orWhere	query_builder/models/postgres/postgres_query.html#orWhere,PostgresQuery,string,string,_2	postgres_query: orWhere(self: PostgresQuery; column: string; symbol: string; value: nil.type): PostgresQuery	
whereBetween	query_builder/models/postgres/postgres_query.html#whereBetween,PostgresQuery,string,array[,]	postgres_query: whereBetween(self: PostgresQuery; column: string; width: array[2, int | float]): PostgresQuery	
whereBetween	query_builder/models/postgres/postgres_query.html#whereBetween,PostgresQuery,string,array[,string]	postgres_query: whereBetween(self: PostgresQuery; column: string; width: array[2, string]): PostgresQuery	
whereNotBetween	query_builder/models/postgres/postgres_query.html#whereNotBetween,PostgresQuery,string,array[,]	postgres_query: whereNotBetween(self: PostgresQuery; column: string;\n                width: array[2, int | float]): PostgresQuery	
whereNotBetween	query_builder/models/postgres/postgres_query.html#whereNotBetween,PostgresQuery,string,array[,string]	postgres_query: whereNotBetween(self: PostgresQuery; column: string; width: array[2, string]): PostgresQuery	
whereIn	query_builder/models/postgres/postgres_query.html#whereIn,PostgresQuery,string,seq[]	postgres_query: whereIn(self: PostgresQuery; column: string; width: seq[int | float | string]): PostgresQuery	
whereNotIn	query_builder/models/postgres/postgres_query.html#whereNotIn,PostgresQuery,string,seq[]	postgres_query: whereNotIn(self: PostgresQuery; column: string; width: seq[int | float | string]): PostgresQuery	
whereNull	query_builder/models/postgres/postgres_query.html#whereNull,PostgresQuery,string	postgres_query: whereNull(self: PostgresQuery; column: string): PostgresQuery	
groupBy	query_builder/models/postgres/postgres_query.html#groupBy,PostgresQuery,string	postgres_query: groupBy(self: PostgresQuery; column: string): PostgresQuery	
having	query_builder/models/postgres/postgres_query.html#having,PostgresQuery,string,string,	postgres_query: having(self: PostgresQuery; column: string; symbol: string;\n       value: string | int | float | bool): PostgresQuery	
having	query_builder/models/postgres/postgres_query.html#having,PostgresQuery,string,string,_2	postgres_query: having(self: PostgresQuery; column: string; symbol: string; value: nil.type): PostgresQuery	
orderBy	query_builder/models/postgres/postgres_query.html#orderBy,PostgresQuery,string,Order	postgres_query: orderBy(self: PostgresQuery; column: string; order: Order): PostgresQuery	
limit	query_builder/models/postgres/postgres_query.html#limit,PostgresQuery,int	postgres_query: limit(self: PostgresQuery; num: int): PostgresQuery	
offset	query_builder/models/postgres/postgres_query.html#offset,PostgresQuery,int	postgres_query: offset(self: PostgresQuery; num: int): PostgresQuery	
get	query_builder/models/postgres/postgres_query.html#get,PostgresQuery	postgres_query: get(self: PostgresQuery): Future[seq[JsonNode]]	
first	query_builder/models/postgres/postgres_query.html#first,PostgresQuery	postgres_query: first(self: PostgresQuery): Future[Option[JsonNode]]	
find	query_builder/models/postgres/postgres_query.html#find,PostgresQuery,string,string	postgres_query: find(self: PostgresQuery; id: string; key = &quot;id&quot;): Future[Option[JsonNode]]	
find	query_builder/models/postgres/postgres_query.html#find,PostgresQuery,int,string	postgres_query: find(self: PostgresQuery; id: int; key = &quot;id&quot;): Future[Option[JsonNode]]	
getPlain	query_builder/models/postgres/postgres_query.html#getPlain,PostgresQuery	postgres_query: getPlain(self: PostgresQuery): Future[seq[seq[string]]]	
firstPlain	query_builder/models/postgres/postgres_query.html#firstPlain,PostgresQuery	postgres_query: firstPlain(self: PostgresQuery): Future[seq[string]]	
findPlain	query_builder/models/postgres/postgres_query.html#findPlain,PostgresQuery,string,string	postgres_query: findPlain(self: PostgresQuery; id: string; key = &quot;id&quot;): Future[seq[string]]	
findPlain	query_builder/models/postgres/postgres_query.html#findPlain,PostgresQuery,int,string	postgres_query: findPlain(self: PostgresQuery; id: int; key = &quot;id&quot;): Future[seq[string]]	
get	query_builder/models/postgres/postgres_query.html#get,PostgresQuery,typedesc[T]	postgres_query: get[T](self: PostgresQuery; typ: typedesc[T]): Future[seq[T]]	
first	query_builder/models/postgres/postgres_query.html#first,PostgresQuery,typedesc[T]	postgres_query: first[T](self: PostgresQuery; typ: typedesc[T]): Future[Option[T]]	
find	query_builder/models/postgres/postgres_query.html#find,PostgresQuery,string,typedesc[T],string	postgres_query: find[T](self: PostgresQuery; id: string; typ: typedesc[T]; key = &quot;id&quot;): Future[\n    Option[T]]	
find	query_builder/models/postgres/postgres_query.html#find,PostgresQuery,int,typedesc[T],string	postgres_query: find[T](self: PostgresQuery; id: int; typ: typedesc[T]; key = &quot;id&quot;): Future[\n    Option[T]]	
insert	query_builder/models/postgres/postgres_query.html#insert,PostgresQuery,JsonNode	postgres_query: insert(self: PostgresQuery; items: JsonNode): owned(Future[void])	
insert	query_builder/models/postgres/postgres_query.html#insert,PostgresQuery,seq[JsonNode]	postgres_query: insert(self: PostgresQuery; items: seq[JsonNode]): owned(Future[void])	
insertId	query_builder/models/postgres/postgres_query.html#insertId,PostgresQuery,JsonNode,string	postgres_query: insertId(self: PostgresQuery; items: JsonNode; key = &quot;id&quot;): Future[string]	
insertId	query_builder/models/postgres/postgres_query.html#insertId,PostgresQuery,seq[JsonNode],string	postgres_query: insertId(self: PostgresQuery; items: seq[JsonNode]; key = &quot;id&quot;): Future[\n    seq[string]]	
update	query_builder/models/postgres/postgres_query.html#update,PostgresQuery,JsonNode	postgres_query: update(self: PostgresQuery; items: JsonNode): owned(Future[void])	
delete	query_builder/models/postgres/postgres_query.html#delete,PostgresQuery	postgres_query: delete(self: PostgresQuery): owned(Future[void])	
delete	query_builder/models/postgres/postgres_query.html#delete,PostgresQuery,int,string	postgres_query: delete(self: PostgresQuery; id: int; key = &quot;id&quot;): owned(Future[void])	
columns	query_builder/models/postgres/postgres_query.html#columns,PostgresQuery	postgres_query: columns(self: PostgresQuery): Future[seq[string]]	
count	query_builder/models/postgres/postgres_query.html#count,PostgresQuery	postgres_query: count(self: PostgresQuery): Future[int]	
min	query_builder/models/postgres/postgres_query.html#min,PostgresQuery,string	postgres_query: min(self: PostgresQuery; column: string): Future[Option[string]]	
max	query_builder/models/postgres/postgres_query.html#max,PostgresQuery,string	postgres_query: max(self: PostgresQuery; column: string): Future[Option[string]]	
avg	query_builder/models/postgres/postgres_query.html#avg,PostgresQuery,string	postgres_query: avg(self: PostgresQuery; column: string): Future[Option[float]]	
sum	query_builder/models/postgres/postgres_query.html#sum,PostgresQuery,string	postgres_query: sum(self: PostgresQuery; column: string): Future[Option[float]]	
begin	query_builder/models/postgres/postgres_query.html#begin,PostgresConnections	postgres_query: begin(self: PostgresConnections): owned(Future[void])	
rollback	query_builder/models/postgres/postgres_query.html#rollback,PostgresConnections	postgres_query: rollback(self: PostgresConnections): owned(Future[void])	
commit	query_builder/models/postgres/postgres_query.html#commit,PostgresConnections	postgres_query: commit(self: PostgresConnections): owned(Future[void])	
get	query_builder/models/postgres/postgres_query.html#get,RawPostgresQuery	postgres_query: get(self: RawPostgresQuery): Future[seq[JsonNode]]	
getPlain	query_builder/models/postgres/postgres_query.html#getPlain,RawPostgresQuery	postgres_query: getPlain(self: RawPostgresQuery): Future[seq[seq[string]]]	
exec	query_builder/models/postgres/postgres_query.html#exec,RawPostgresQuery	postgres_query: exec(self: RawPostgresQuery): owned(Future[void])	
first	query_builder/models/postgres/postgres_query.html#first,RawPostgresQuery	postgres_query: first(self: RawPostgresQuery): Future[Option[JsonNode]]	
firstPlain	query_builder/models/postgres/postgres_query.html#firstPlain,RawPostgresQuery	postgres_query: firstPlain(self: RawPostgresQuery): Future[seq[string]]	
seeder	query_builder/models/postgres/postgres_query.html#seeder.t,PostgresConnections,string,untyped	postgres_query: seeder(rdb: PostgresConnections; tableName: string; body: untyped): untyped	
seeder	query_builder/models/postgres/postgres_query.html#seeder.t,PostgresConnections,string,string,untyped	postgres_query: seeder(rdb: PostgresConnections; tableName, column: string; body: untyped): untyped	
