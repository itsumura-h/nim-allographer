table	query_builder/models/surreal/surreal_query.html#table,SurrealQuery,string	surreal_query: table(self: SurrealQuery; tableArg: string): SurrealQuery	
`distinct`	query_builder/models/surreal/surreal_query.html#distinct,SurrealQuery	surreal_query: `distinct`(self: SurrealQuery): SurrealQuery	
where	query_builder/models/surreal/surreal_query.html#where,SurrealQuery,string,string,	surreal_query: where(self: SurrealQuery; column: string; symbol: string;\n      value: bool | int | float | string | SurrealId): SurrealQuery	
where	query_builder/models/surreal/surreal_query.html#where,SurrealQuery,string,string,_2	surreal_query: where(self: SurrealQuery; column: string; symbol: string; value: nil.type): SurrealQuery	
orWhere	query_builder/models/surreal/surreal_query.html#orWhere,SurrealQuery,string,string,	surreal_query: orWhere(self: SurrealQuery; column: string; symbol: string;\n        value: bool | int | float | string | SurrealId): SurrealQuery	
orWhere	query_builder/models/surreal/surreal_query.html#orWhere,SurrealQuery,string,string,_2	surreal_query: orWhere(self: SurrealQuery; column: string; symbol: string; value: nil.type): SurrealQuery	
whereBetween	query_builder/models/surreal/surreal_query.html#whereBetween,SurrealQuery,string,array[,]	surreal_query: whereBetween(self: SurrealQuery; column: string; width: array[2, int | float]): SurrealQuery	
whereNotBetween	query_builder/models/surreal/surreal_query.html#whereNotBetween,SurrealQuery,string,array[,]	surreal_query: whereNotBetween(self: SurrealQuery; column: string; width: array[2, int | float]): SurrealQuery	
whereIn	query_builder/models/surreal/surreal_query.html#whereIn,SurrealQuery,string,seq[]	surreal_query: whereIn(self: SurrealQuery; column: string; width: seq[int | float | string]): SurrealQuery	
whereNotIn	query_builder/models/surreal/surreal_query.html#whereNotIn,SurrealQuery,string,seq[]	surreal_query: whereNotIn(self: SurrealQuery; column: string; width: seq[int | float | string]): SurrealQuery	
whereNull	query_builder/models/surreal/surreal_query.html#whereNull,SurrealQuery,string	surreal_query: whereNull(self: SurrealQuery; column: string): SurrealQuery	
groupBy	query_builder/models/surreal/surreal_query.html#groupBy,SurrealQuery,string	surreal_query: groupBy(self: SurrealQuery; column: string): SurrealQuery	
having	query_builder/models/surreal/surreal_query.html#having,SurrealQuery,string,string,	surreal_query: having(self: SurrealQuery; column: string; symbol: string;\n       value: bool | int | float | string): SurrealQuery	
having	query_builder/models/surreal/surreal_query.html#having,SurrealQuery,string,string,_2	surreal_query: having(self: SurrealQuery; column: string; symbol: string; value: nil.type): SurrealQuery	
fetch	query_builder/models/surreal/surreal_query.html#fetch,SurrealQuery,varargs[string]	surreal_query: fetch(self: SurrealQuery; columnsArg: varargs[string]): SurrealQuery	
orderBy	query_builder/models/surreal/surreal_query.html#orderBy,SurrealQuery,string,Order	surreal_query: orderBy(self: SurrealQuery; column: string; order: Order): SurrealQuery	
orderBy	query_builder/models/surreal/surreal_query.html#orderBy,SurrealQuery,string,Collation,Order	surreal_query: orderBy(self: SurrealQuery; column: string; collation: Collation; order: Order): SurrealQuery	
limit	query_builder/models/surreal/surreal_query.html#limit,SurrealQuery,int	surreal_query: limit(self: SurrealQuery; num: int): SurrealQuery	
start	query_builder/models/surreal/surreal_query.html#start,SurrealQuery,int	surreal_query: start(self: SurrealQuery; num: int): SurrealQuery	
parallel	query_builder/models/surreal/surreal_query.html#parallel,SurrealQuery	surreal_query: parallel(self: SurrealQuery): SurrealQuery	
get	query_builder/models/surreal/surreal_query.html#get,SurrealQuery	surreal_query: get(self: SurrealQuery): Future[seq[JsonNode]]	
first	query_builder/models/surreal/surreal_query.html#first,SurrealQuery	surreal_query: first(self: SurrealQuery): Future[Option[JsonNode]]	
find	query_builder/models/surreal/surreal_query.html#find,SurrealQuery,SurrealId,string	surreal_query: find(self: SurrealQuery; id: SurrealId; key = &quot;id&quot;): Future[Option[JsonNode]]	
insert	query_builder/models/surreal/surreal_query.html#insert,SurrealQuery,JsonNode	surreal_query: insert(self: SurrealQuery; items: JsonNode): owned(Future[void])	
insert	query_builder/models/surreal/surreal_query.html#insert,SurrealQuery,seq[JsonNode]	surreal_query: insert(self: SurrealQuery; items: seq[JsonNode]): owned(Future[void])	
insertId	query_builder/models/surreal/surreal_query.html#insertId,SurrealQuery,JsonNode,string	surreal_query: insertId(self: SurrealQuery; items: JsonNode; key = &quot;id&quot;): Future[SurrealId]	
insertId	query_builder/models/surreal/surreal_query.html#insertId,SurrealQuery,seq[JsonNode],string	surreal_query: insertId(self: SurrealQuery; items: seq[JsonNode]; key = &quot;id&quot;): Future[\n    seq[SurrealId]]	
update	query_builder/models/surreal/surreal_query.html#update,SurrealQuery,JsonNode	surreal_query: update(self: SurrealQuery; items: JsonNode): owned(Future[void])	
update	query_builder/models/surreal/surreal_query.html#update,SurrealConnections,SurrealId,JsonNode	surreal_query: update(self: SurrealConnections; id: SurrealId; items: JsonNode): owned(\n    Future[void])	
delete	query_builder/models/surreal/surreal_query.html#delete,SurrealQuery	surreal_query: delete(self: SurrealQuery): owned(Future[void])	
delete	query_builder/models/surreal/surreal_query.html#delete,SurrealQuery,SurrealId	surreal_query: delete(self: SurrealQuery; id: SurrealId): owned(Future[void])	
columns	query_builder/models/surreal/surreal_query.html#columns,SurrealQuery	surreal_query: columns(self: SurrealQuery): Future[seq[string]]	
count	query_builder/models/surreal/surreal_query.html#count,SurrealQuery	surreal_query: count(self: SurrealQuery): Future[int]	
min	query_builder/models/surreal/surreal_query.html#min,SurrealQuery,string,Collation	surreal_query: min(self: SurrealQuery; column: string; collaction: Collation = None): Future[\n    string]	
max	query_builder/models/surreal/surreal_query.html#max,SurrealQuery,string,Collation	surreal_query: max(self: SurrealQuery; column: string; collaction: Collation = None): Future[\n    string]	
avg	query_builder/models/surreal/surreal_query.html#avg,SurrealQuery,string	surreal_query: avg(self: SurrealQuery; column: string): Future[float]	
sum	query_builder/models/surreal/surreal_query.html#sum,SurrealQuery,string	surreal_query: sum(self: SurrealQuery; column: string): Future[float]	
get	query_builder/models/surreal/surreal_query.html#get,RawSurrealQuery	surreal_query: get(self: RawSurrealQuery): Future[seq[JsonNode]]	
exec	query_builder/models/surreal/surreal_query.html#exec,RawSurrealQuery	surreal_query: exec(self: RawSurrealQuery): owned(Future[void])	
info	query_builder/models/surreal/surreal_query.html#info,RawSurrealQuery	surreal_query: info(self: RawSurrealQuery): Future[JsonNode]	
first	query_builder/models/surreal/surreal_query.html#first,RawSurrealQuery	surreal_query: first(self: RawSurrealQuery): Future[Option[JsonNode]]	
seeder	query_builder/models/surreal/surreal_query.html#seeder.t,SurrealConnections,string,untyped	surreal_query: seeder(rdb: SurrealConnections; tableName: string; body: untyped): untyped	
seeder	query_builder/models/surreal/surreal_query.html#seeder.t,SurrealConnections,string,string,untyped	surreal_query: seeder(rdb: SurrealConnections; tableName, column: string; body: untyped): untyped	
