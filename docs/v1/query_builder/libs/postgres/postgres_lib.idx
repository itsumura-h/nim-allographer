dbError	v1/query_builder/libs/postgres/postgres_lib.html#dbError,PPGconn	postgres_lib: dbError(db: PPGconn)	
checkError	v1/query_builder/libs/postgres/postgres_lib.html#checkError,PPGconn	postgres_lib: checkError(db: PPGconn)	
setColumnInfo	v1/query_builder/libs/postgres/postgres_lib.html#setColumnInfo,PPGresult,DbRows,int32,int32	postgres_lib: setColumnInfo(res: PPGresult; dbRows: var DbRows; line, cols: int32)	
newRow	v1/query_builder/libs/postgres/postgres_lib.html#newRow,int	postgres_lib: newRow(L: int): Row	
setRow	v1/query_builder/libs/postgres/postgres_lib.html#setRow,PPGresult,Row,int32,int32	postgres_lib: setRow(res: PPGresult; r: var Row; line, cols: int32)	
dbFormat	v1/query_builder/libs/postgres/postgres_lib.html#dbFormat,string,varargs[string]	postgres_lib: dbFormat(formatstr: string; args: varargs[string]): string	
questionToDaller	v1/query_builder/libs/postgres/postgres_lib.html#questionToDaller,string	postgres_lib: questionToDaller(s: string): string	
PGParams	v1/query_builder/libs/postgres/postgres_lib.html#PGParams	postgres_lib: PGParams	
fromObjArray	v1/query_builder/libs/postgres/postgres_lib.html#fromObjArray,typePGParams,JsonNode,seq[Row]	postgres_lib: fromObjArray(_: type PGParams; args: JsonNode; columns: seq[Row]): PGParams	
fromObjArray	v1/query_builder/libs/postgres/postgres_lib.html#fromObjArray,typePGParams,JsonNode	postgres_lib: fromObjArray(_: type PGParams; args: JsonNode): PGParams	
fromArray	v1/query_builder/libs/postgres/postgres_lib.html#fromArray,typePGParams,JsonNode	postgres_lib: fromArray(_: type PGParams; args: JsonNode): PGParams	
